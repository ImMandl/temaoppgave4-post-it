{"version":3,"sources":["Components/NoteSubmodule.js","Components/Note.js","App.js","serviceWorker.js","index.js"],"names":["NoteSumbodule","props","useState","setNote","textRef","useRef","className","style","backgroundColor","color","onClick","remove","id","fontSize","cursor","float","contentEditable","ref","onInput","current","todo","Note","text","todos","setTodos","fargevalg","setFargevalg","noteId","setNoteId","filter","makeNote","evt","kopi","target","value","filterColors","type","name","map","Key","NoteSubmodule","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bc6e584.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { MdDelete } from \"react-icons/md\"\r\nimport './NoteModule.css'\r\n\r\nconst NoteSumbodule = (props) => {\r\n\r\n    const textArray = []\r\n\r\n    const [note, setNote] = useState(textArray)\r\n    const textRef = useRef()\r\n\r\n    const updateText = () => {\r\n        setNote(textRef.current)\r\n    }\r\n\r\n    return (\r\n        // sticky note kortet \r\n        <div className=\"card scroll \" style={{ backgroundColor: props.color }} >\r\n            <div className=\"notepad-item\">\r\n\r\n                {/* knapp/ikon for å slette en sticky note */}\r\n                <MdDelete onClick={() => props.remove(props.id)} style={{ fontSize: 2.6 + 'rem', cursor: 'pointer', float: 'right' }} />\r\n\r\n                {/* redigerbar tekst som dukker opp på sticky note */}\r\n                <li contentEditable ref={textRef} onInput={updateText}>{props.todo}</li>\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default NoteSumbodule","import React, { useState } from 'react'\r\nimport '../App.css'\r\nimport '../Components/Radiobtns.css'\r\nimport NoteSubmodule from './NoteSubmodule'\r\n\r\nconst Note = () => {\r\n\r\n    // array med notes i\r\n    let array = [\r\n        {\r\n            text: 'edit this text',\r\n            id: 1,\r\n            color: '#ffc'\r\n        }\r\n    ]\r\n\r\n    const [todos, setTodos] = useState(array) // \r\n    const [fargevalg, setFargevalg] = useState(\"all\") // filterer post-its etter farge. Starter med å vise alle\r\n    const [noteId, setNoteId] = useState(2) // starter neste note med id 2\r\n\r\n\r\n    const remove = (id) => {\r\n        // fjerner note item\r\n        setTodos(\r\n            // fjerner notes basert på deres unike ide\r\n            // hvis id er lik fjern som note som blir trykket på fjern\r\n            todos.filter(todo => todo.id !== id)\r\n        )\r\n    }\r\n\r\n    const makeNote = (evt) => {\r\n        // skal gi hver note en unik id\r\n        setNoteId(noteId + 1)\r\n        // lager en kopi av array\r\n        let kopi = [...todos]\r\n        // lager en note \r\n        setTodos([...kopi,\r\n        {\r\n            text: 'take notes',\r\n            id: noteId,\r\n            color: evt.target.value\r\n        },\r\n        ])\r\n    }\r\n\r\n    /* Filtrerer post-its etter farger */\r\n    const filterColors = (evt) => {\r\n        setFargevalg(evt.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"wrapper\">\r\n                <div>\r\n                    <h1>Take notes!</h1>\r\n                    <h2>Choose color for post-it note</h2>\r\n                    {/* knapper som lager notes */}\r\n                    <div className=\"categories\">\r\n                        <label className=\"container\">Yellow\r\n                            <input type=\"button\" name=\"button\" value=\"#ffc\" onClick={makeNote} />\r\n                            <span className=\"yellow checkmark\"></span>\r\n                        </label>\r\n                        <label className=\"container\">Pink\r\n                            <input type=\"button\" name=\"button\" value=\"pink\" onClick={makeNote} />\r\n                            <span className=\"pink checkmark\"></span>\r\n                        </label>\r\n                        <label className=\"container\">Teal\r\n                            <input type=\"button\" name=\"button\" value=\"lightblue\" onClick={makeNote} />\r\n                            <span className=\"teal checkmark\"></span>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Filter */}\r\n                <div >\r\n                    <h1>Filter</h1>\r\n                    <h2>Choose color to filter by</h2>\r\n                    <div className=\"categories\">\r\n                        <label className=\"container\" >Show all post-its\r\n                            <input type=\"radio\" name=\"radio\" value=\"all\" onClick={filterColors} />\r\n                            <span className=\"all checkmark\"></span>\r\n                        </label>\r\n                        <label className=\"container\">Show yellow post-its\r\n                            <input type=\"radio\" name=\"radio\" value=\"#ffc\" onClick={filterColors} />\r\n                            <span className=\"yellow checkmark\"></span>\r\n                        </label>\r\n                        <label className=\"container\">Show pink post-its\r\n                            <input type=\"radio\" name=\"radio\" value=\"pink\" onClick={filterColors} />\r\n                            <span className=\"pink checkmark\"></span>\r\n                        </label>\r\n                        <label className=\"container\">Show teal post-its\r\n                            <input type=\"radio\" name=\"radio\" value=\"lightblue\" onClick={filterColors} />\r\n                            <span className=\"teal checkmark\"></span>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* note i submodule */}\r\n            <section className=\"card-container\">\r\n                {fargevalg !== \"all\" &&\r\n                    todos.filter(todo => todo.color === fargevalg).\r\n                        map((todo, Key) =>\r\n                            <NoteSubmodule\r\n                                color={todo.color}\r\n                                todo={todo.text}\r\n                                id={todo.id}\r\n                                key={Key}\r\n                                remove={remove}\r\n                            />)\r\n                }\r\n                {fargevalg === \"all\" &&\r\n                    todos.map((todo, Key) =>\r\n                        <NoteSubmodule\r\n                            color={todo.color}\r\n                            todo={todo.text}\r\n                            id={todo.id}\r\n                            key={Key}\r\n                            remove={remove}\r\n                        />)\r\n                }\r\n            </section>\r\n        </div >\r\n    )\r\n}\r\nexport default Note","import React from 'react';\nimport './App.css';\nimport Note from './Components/Note';\n\nfunction App() {\n  return (\n    <div>\n      <Note />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}